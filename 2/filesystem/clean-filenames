#!/usr/bin/guile
!#

;expects newline separated file paths on standard input and renames file names

(import (sph filesystem) (sph hashtable)
  (sph io) (sph list)
  (sph alist) (sph number)
  (sph other) (sph process) (sph string) (sph vector) (sph) (sph cli) (ice-9 rdelim) (ice-9 streams))

(define arguments ((cli-create #:options (list-q (dry-run)))))
(define dry-run (alist-ref-q arguments dry-run))

(define default-clean-filename-config
  (map (l (a) (pair (make-regexp (first a)) (tail a)))
    (q
      ( ("--" . ".") ("\\(invalid encoding\\)" . "") (" *& *" . "+")
        ("\\(" . ".") ("\\)" . ".")
        ("[^-+.öäüa-zA-Z0-9]" . " ") ("\\.htm$" . ".html")
        ("\\.jpeg$" . ".jpg") (" - " . ".")
        ("  +" . " ") ("^\\W+" . "")
        ("\\W+$" . "") (" *\\. *" . ".")
        ("\\.-" . ".") ("-\\." . ".") ("\\.$" . "") ("^\\." . "") ("\\.\\.+" . ".")))))

(define (clean-filename a)
  (fold (l (b r) (regexp-replace r (first b) (tail b))) (string-downcase a)
    default-clean-filename-config))

(define (rename-clean-path a)
  (let*
    ((a (realpath* a)) (new-path (string-append (dirname a) "/" (clean-filename (basename a)))))
    (if (not (string-equal? new-path a))
      (begin
        (display
          (string-append (string-quote (basename a)) " -> " (string-quote (basename new-path)) "\n"))
        (if (not dry-run) (rename-file a new-path))))))

(stream-for-each rename-clean-path (port->stream (current-input-port) read-line))
