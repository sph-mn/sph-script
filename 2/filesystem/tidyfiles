#!/usr/bin/guile
!#

; moves files into directories by using regular expressions on mime-types
; removes unwanted characters from file names
; deletes empty directories

(import (guile) (ice-9 regex)
  (sph alist) (except (srfi srfi-1) map)
  (ice-9 ftw) (sph filesystem)
  (sph hashtable) (sph io)
  (sph list) (sph number)
  (sph other) (sph process)
  (sph string) (sph vector) (sph) (sph cli) (rnrs exceptions) (sph process) (sph tree))

(define trim-char-set (list->char-set (quote (#\newline #\space))))

(define (path->mime-type path)
  (string-trim-both
    (shell-eval->string (string-append "file --brief --mime-type " (string-quote path)))
    trim-char-set))

(define-syntax-rule (filename-extension-case path cond ...)
  (let (t (filename-extension path)) (string-case (or t "") cond ...)))

(define-as ignored-filenames list-q
  "personal" "download" "collections" "backup" "screenshots" "nosync" "p")

(define-as mime-type->path list-qq
  ; (mime-type-regexp target-directory [relative-target-directory/relative-target-directory-proc])
  ; (string/(string ...) string [string/procedure])
  ("image/.*" "picture")
  ( ("text/.*" "application/xml") "text"
    (unquote
      (l (path)
        (filename-extension-case path ("scm" "programming/scm")
          ("sh" "programming/bash") ("rb" "programming/ruby")
          ("js" "programming/javascript") ("sql" "programming/sql")
          ("pd" "programming/puredata") (("html" "rhtml") "programming/html")
          (("css" "less" "scss") "programming/stylesheet") (("c" "sc") "programming/c")
          (("yml") "programming/other") ("text" "plain")
          ("csv" "machine-readable-data") (else "other")))))
  ("video/.*" "video") ("audio/.*" "audio")
  ( ("application/pdf" "application/postscript" "application/vnd.oasis.opendocument"
      "application/vnd.open.*")
    "documents")
  ( ("application/x-gzip" "application/x-rar" "application/x-xz"
      "application/x-7z-compressed" "application/zip")
    "other" "compressed")
  (".*" "other"))

(define default-file-rename-config
  (map (l (a) (pair (make-regexp (first a)) (tail a)))
    (q (("[^-.öäüa-zA-Z0-9]" . " ") ("\\.htm$" . ".html") (" - " . ".") (" +" . " ")))))

(define (default-file-rename a)
  (fold (l (a r) (regexp-replace r (first a) (tail a))) (string-downcase a)
    default-file-rename-config))

(define (prepare-mime-type->path a)
  (map
    (l (a)
      (list->vector
        (pair
          (let (regexp (first a))
            (make-regexp
              (if (list? regexp) (string-append "(" (string-join regexp ")|(") ")") regexp)))
          (tail a))))
    a))

(define target-toplevel-directories (delete-duplicates (map second mime-type->path)))

(define (source-path->target-path source-path mime-type->path)
  (let (mime-type (path->mime-type source-path))
    (if
      (or (contains? target-toplevel-directories (basename source-path))
        (contains? ignored-filenames (basename source-path)))
      #f
      (let (config (find (l (a) (regexp-exec (vector-ref a 0) mime-type)) mime-type->path))
        (path-append (vector-ref config 1)
          (if (> (vector-length config) 2)
            (let (relative-path (vector-ref config 2))
              (if (procedure? relative-path) (relative-path source-path) relative-path))
            ""))))))

(define (tidyfiles path config) "each directory entry, then delete empty toplevel directories"
  (each
    (l (name)
      (let* ((source-path name) (target-dir (source-path->target-path source-path config)))
        (if target-dir
          (let (target-path (make-path-unique (path-append target-dir (default-file-rename name))))
            (guard (obj (#t (string-append "ignored file \"" name "\"")))
              (ensure-directory-structure target-dir) (rename-file source-path target-path))))))
    (scandir path))
  (system* "delete-if-empty" path))

(define (tidyfiles-cli)
  (let
    (options
      ((cli-create #:description "move files into directories by mime type" (list-q (path)))))
    (tidyfiles (alist-ref-q options path) (prepare-mime-type->path mime-type->path))))

(tidyfiles-cli)
