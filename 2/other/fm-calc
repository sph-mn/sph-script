#!/usr/bin/guile
!#

(use-modules (sph) (sph cli) (sph alist) (sph list))
(define description "calculate frequency modulation properties")
(define (factorial n) (if (>= 0 n) 1 (factorial (- n 1))))

(define (bessel n x)
  (let ((x (exact->inexact x)) (precision 1.0e-5) (t0 (/ 1 (factorial n))))
    (let loop ((k 1) (t0 t0) (sum t0))
      (let*
        ( (r (* -1 (/ (/ (* x x) 4) (* k (+ n k))))) (t1 (* r t0)) (sum (+ sum t1))
          (t0 t1) (k (+ 1 k)))
        (if (> (abs (/ t1 sum)) precision) (loop k t0 sum) (* sum (expt (/ x 2) n)))))))

(define (fm-partial-frq n carrier-frequency modulator-amplitude modulator-frequency)
  (if (= 0 n) (vector 0 carrier-frequency)
    (vector (- carrier-frequency (* n modulator-frequency))
      (+ carrier-frequency (* n modulator-frequency)))))

(define (fm-modulation-index modulator-amplitude modulator-frequency)
  (/ modulator-amplitude modulator-frequency))

(define (fm-partial-amp n carrier-frequency modulator-amplitude modulator-frequency)
  (bessel n (fm-modulation-index modulator-amplitude modulator-frequency)))

(define (bessel-series order end)
  (let loop ((x 0)) (simple-format #t "~A ~A\n" x (bessel order x)) (if (< x end) (loop (+ x 0.1)))))

(define (fm-spectrum-display cfrq mamp mfrq)
  (let loop ((n 0))
    (let ((frq (fm-partial-frq n cfrq mamp mfrq)) (amp (fm-partial-amp n cfrq mamp mfrq)))
      (simple-format #t "  ~A ~A ~A\n"
        (first frq) (tail frq) (if (> (abs amp) 0.01) (exact->inexact amp) 0))
      (if (< n 20) (loop (+ n 1))))))

(define (fm-spectrum cfrq mfrq mamp)
  (list-sort-with-accessor < first
    (filter (l (a) (< 0.01 (abs (tail a))))
      (let loop ((n 0))
        (let ((frq (fm-partial-frq n cfrq mamp mfrq)) (amp (fm-partial-amp n cfrq mamp mfrq)))
          (pairs (pair (vector-ref frq 0) amp) (pair (vector-ref frq 1) amp)
            (if (< n 20) (loop (+ n 1)) null)))))))

(define (fm-spectrum-plot cfrq mfrq mamp)
  (let (spectrum (fm-spectrum cfrq mfrq mamp))
    (for-each (l (a) (simple-format #t "~A ~A\n" (first a) (exact->inexact (tail a)))) spectrum)))

(define (fm-calc-default cfrq mfrq mamp)
  (let* ((spectrum (fm-spectrum cfrq mfrq mamp)) (frqs (map first spectrum)))
    (simple-format #t "carrier: ~A\nmodulator: ~A\namp: ~A\nindex: ~A\nbandwidth: ~A\n\n"
      cfrq mfrq
      mamp (exact->inexact (fm-modulation-index mamp mfrq)) (- (apply max frqs) (apply min frqs)))
    (for-each (l (a) (simple-format #t "~A ~A\n" (first a) (exact->inexact (tail a)))) spectrum)))

(define (fm-calc-spectrum-only cfrq mfrq mamp) (fm-spectrum-plot cfrq mfrq mamp))

(define command-line-interface
  (cli-create #:options (q (((cfrq mfrq mamp) #:required? #t) (spectrum-only #:names #\s)))
    #:description description))

(define (fm-calc)
  (alist-bind (command-line-interface) (cfrq mfrq mamp spectrum-only)
    (let ((cfrq (string->number cfrq)) (mfrq (string->number mfrq)) (mamp (string->number mamp)))
      (if spectrum-only (fm-calc-spectrum-only cfrq mfrq mamp) (fm-calc-default cfrq mfrq mamp)))))

(fm-calc)
