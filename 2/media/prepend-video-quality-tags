#!/usr/bin/env guile
!#

(import (sph string) (sph) (sph cli) (sph alist) (sph hashtable) (sph list) (sph media-info))

(define prepend-video-quality-tags-description
  "prepend strings to a filename that quantify the quality of the encoded video.
   the current format is width + height + bitrate, a framerate and a codec factor")

(define-as codec-penalties ht-create "h265" 0 "hevc" 0 "vp9" 1 "h264" 1 "vp8" 2 "wmv3" 2 "wmv2" 3)
(define unit-bitrate 400000)

(define (calculate-rating bitrate codec)
  (and bitrate codec
    (let
      ( (codec-factor (- 1 (* (ht-ref codec-penalties codec 3) 0.1)))
        (bitrate-rating (/ bitrate unit-bitrate)))
      (inexact->exact (floor (* bitrate-rating codec-factor))))))

(define (create-rating-string rating) (number->string rating 10))

(define (get-media-info path)
  (let (a (media-info-video path))
    (alist-q bitrate (false-if-exception (string->number (alist-ref a "bit_rate")))
      framerate
      (false-if-exception
        (inexact->exact (round (exact->inexact (string->number (alist-ref a "avg_frame_rate"))))))
      width (alist-ref a "width") height (alist-ref a "height") codec (alist-ref a "codec_name"))))

(define (display-dry-run old new)
  (display-line (string-append (string-quote old) " -> " (string-quote new))))

(define (pvqt paths dry-run)
  (each
    (l (path)
      (and-let*
        ( (data (get-media-info path))
          (rating (calculate-rating (alist-ref-q data bitrate) (alist-ref-q data codec)))
          (rating-string (create-rating-string rating)))
        ( (if dry-run display-dry-run rename-file) path
          (string-append (dirname path) "/q" rating-string "." (basename path)))))
    paths))

(define pvqt-cli
  (let (cli (cli-create #:options (list-q (dry-run) ((paths ...)))))
    (l (arguments) (alist-bind (cli arguments) (paths dry-run) (pvqt paths dry-run)))))

(pvqt-cli (tail (program-arguments)))
