#!/usr/bin/guile
!#

(use-modules (srfi srfi-1) (sph string) (sph) (sph cli) (sph alist) (sph list) (sph process))

(define prepend-video-quality-tags-description
  "prepend \"p{shortest-pixel-side}f{frames-per-second}.\" to filenames.
   usage: prepend-video-tags path ...")

(define (rename-dry-run old new)
  (display-line (string-append (string-quote old) " -> " (string-quote new))))

(define (get-duration-string duration)
  (if duration
    (cond ((< duration 500) "d1") ((> duration 2500) "d3") ((> duration 5000) "d4") (else "d2")) "d0"))

(define (get-range-factor a range min max)
  "scales 'a' into range (0..range) if between min and max, otherwise returns either min or max"
  (if (<= a min) 0 (if (>= a max) range (* range (/ (- a min) (- max min))))))

(define (get-delta-factor a base delta step)
  "factor to scale by 'step' for each 'delta' difference to 'base'"
  (+ 1 (* step (/ (abs (- a base)) delta))))

(define (get-doubling-factor a base step) "factor to scale by 'step' for each doubling of 'step'"
  (+ 1 (* step (/ (log (/ a base)) (log 2)))))

(define debug-quality-score-table #f)
(define debug-quality-score-log 0)

(define (get-quality-score width height framerate bitdepth bitrate codec)
  (let*
    ( (codec-factor
        (/
          (string-case codec ("av1" 1/3)
            ("h264" 1) ("h266" 1/4) ("hevc" 1/2) ("vp8" 1) ("vp9" 2/3) (else 1.5))
          79))
      (resolution (* width height)) (datarate (* resolution bitdepth framerate codec-factor))
      (bitrate-factor (+ 0.5 (get-range-factor bitrate 1 (* datarate 0.5) (* datarate 1.5))))
      (framerate-factor (get-doubling-factor framerate 30 1/3))
      (bitdepth-factor (get-delta-factor bitdepth 8 2 1/3))
      (resolution-factor (get-doubling-factor resolution (* 640 480) 1))
      (score
        (max 1
          (inexact->exact
            (round (* bitdepth-factor bitrate-factor framerate-factor resolution-factor))))))
    (if (< 0 debug-quality-score-log)
      (simple-format #t "~Ax~A ~A ~A ~A ~A ~A -> ~A\n"
        width height framerate bitdepth (inexact->exact (round datarate)) bitrate codec score))
    (if (< 1 debug-quality-score-log)
      (display-line
        (string-append " "
          (string-join
            (map-slice 2
              (l a (string-append (first a) " " (number->string (exact->inexact (second a)))))
              (list "codec-factor" codec-factor
                "framerate-factor" framerate-factor
                "bitdepth-factor" bitdepth-factor
                "bitrate-factor" bitrate-factor
                "resolution-factor" resolution-factor
                "optimal-bitrate" (round (exact->inexact datarate))))
            "\n  "))))
    score))

(define (ffprobe path entries)
  (let
    (data
      (map (l (line) (let (a (string-split line #\=)) (pair (first a) (second a))))
        (string-split
          (string-trim-right
            (execute->string "ffprobe" "-v"
              "quiet" "-select_streams"
              "v:0" "-show_entries"
              (string-append "stream=" (string-join entries ",")) "-of"
              "default=noprint_wrappers=1" path))
          #\newline)))
    (map (l (entry) (alist-ref data entry)) entries)))

(define (get-tag path with-duration quality-score)
  (apply
    (l (bitdepth bitrate codec duration height framerate width)
      (let
        (duration-string
          (if with-duration (get-duration-string (if duration (string->number duration) 0)) ""))
        (let
          ( (height (or (and height (string->number height)) 320))
            (width (or (and width (string->number width)) 240)))
          (if quality-score
            (let
              ( (bitdepth (or (and bitdepth (string->number bitdepth)) 8))
                (bitrate (or (and bitrate (string->number bitrate)) 1000))
                (framerate (or (and framerate (string->number framerate)) 15)))
              (string-append duration-string
                (string-append "q"
                  (if (and width height codec)
                    (number->string
                      (get-quality-score width height framerate bitdepth bitrate codec))
                    "0"))))
            (string-append duration-string
              (string-append "p"
                (if (and width height)
                  (number->string (min (string->number width) (string->number height))) "0"))
              (if framerate
                (string-append "f"
                  (number->string (inexact->exact (round (string->number framerate)))))
                ""))))))
    (ffprobe path
      (list "bits_per_raw_sample" "bit_rate"
        "codec_name" "duration" "height" "r_frame_rate" "width"))))

(define (add-tag path tag dry-run)
  (let (new-path (string-append (dirname path) "/" tag "." (basename path)))
    (if (not (string-equal? new-path path)) ((if dry-run rename-dry-run rename-file) path new-path))))

(define (show-quality-score-table)
  (let
    ( (codecs (list "h264" "av1"))
      (resolutions
        (q ((640 . 480) (1280 . 720) (1920 . 1080) (2560 . 1440) (3840 . 2160) (7680 . 4320))))
      (bitrates (list 9000000 25000000 75000000 100000000 200000000)) (bitdepths (list 8 10))
      (framerates (list 30 60 120)))
    (produce
      (l (resolution codec framerate bitdepth bitrate)
        (get-quality-score (first resolution) (tail resolution) framerate bitdepth bitrate codec))
      resolutions codecs framerates bitdepths bitrates)))

(define (prepend-video-tags-cli)
  (let
    (options ((cli-create #:options (q ((dry-run) (with-duration) (quality-score) ((paths ...)))))))
    (alist-bind options (paths dry-run with-duration quality-score)
      (each
        (l (path)
          (if (eq? (q regular) (stat:type (stat path)))
            (let (tag (get-tag path with-duration quality-score))
              (if tag (add-tag path tag dry-run)))))
        paths))))

(if debug-quality-score-table (show-quality-score-table) (prepend-video-tags-cli))
