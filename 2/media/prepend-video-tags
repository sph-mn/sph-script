#!/usr/bin/env ruby

# prepend a video quality and duration score to filenames.
# if option -p was given, prepend "{height}p{fps}." to video filenames.
# call without arguments for more options.
# video quality estimation: https://sph.mn/computer/designs/video-quality-score.html

dry_run = false
quality_score = true
with_duration = true
paths = []

while !ARGV.empty? && ARGV[0].start_with?("-")
  arg = ARGV.shift
  if arg == "-d" then dry_run = true
  elsif arg == "-p" then quality_score = false
  elsif arg == "-t" then with_duration = false
  else
    puts "Unknown option: #{arg}"
    exit 1
  end
end

paths = ARGV

if paths.empty?
  puts "usage: [options] files ..."
  puts "options"
  puts "  -d  dry-run"
  puts "  -p  use pixel format (e.g. 720p30) instead of quality score"
  puts "  -t  without duration tag"
  exit 1
end

def ffprobe_properties(path, entries)
  require "open3"
  entries_str = entries.join(",")
  cmd = ["ffprobe", "-v", "quiet", "-select_streams", "v:0",
         "-show_entries", "stream=#{entries_str}", "-of", "default=noprint_wrappers=1", path]
  stdout_str, stderr_str, status = Open3.capture3(*cmd)
  return {} unless status.success?
  data = {}
  stdout_str.lines.each do |line|
    key, value = line.strip.split("=")
    data[key] = value
  end
  data
end

def get_duration_string(duration)
  if duration
    duration = duration.to_f
    if duration < 500 then "d1"
    elsif duration > 5000 then "d4"
    elsif duration > 2500 then "d3"
    else "d2" end
  else "d0" end
end

def parse_frame_rate(r_frame_rate)
  if r_frame_rate
    nums = r_frame_rate.split("/")
    if nums.length == 2
      nums[0].to_f / nums[1].to_f
    else
      r_frame_rate.to_f
    end
  else nil end
end

def get_quality_score width, height, framerate, bitdepth, bitrate, codec
  codec_efficiencies = {
    "av1" => 1.5,
    "h264" => 1.0,
    "h266" => 2.0,
    "hevc" => 1.7,
    "vp8" => 0.9,
    "vp9" => 1.3
  }
  codec_factor = 1.0 / (codec_efficiencies[codec] || 0.8)
  resolution = width * height
  optimal_bitrate = resolution * bitdepth * framerate * codec_factor
  bitrate_factor = 2.0 / (1 + Math.exp(-0.001 * (bitrate - optimal_bitrate)))
  resolution_factor = Math.log2((resolution / (640.0 * 480.0)) + 1)
  framerate_factor = Math.log2((framerate / 30.0) + 1)
  bitdepth_factor = Math.log2((bitdepth - 6.0) / 2.0)
  score = 0.4 * resolution_factor + 0.3 * framerate_factor + 0.2 * bitdepth_factor + 0.1 * bitrate_factor
  (score * 10).round.to_i
end

def get_tag(path, with_duration, quality_score)
  entries = ["bits_per_raw_sample", "bit_rate", "codec_name", "duration", "height", "r_frame_rate", "width"]
  props = ffprobe_properties(path, entries)

  def parse_numeric(value, default)
    if value.is_a?(String) && value.match?(/\A[-+]?\d*\.?\d+\Z/)
      value.include?('.') ? value.to_f : value.to_i
    else
      default
    end
  end

  duration_string = ""
  if with_duration
    duration = props["duration"] ? parse_numeric(props["duration"], 0.0) : 0.0
    duration_string = get_duration_string(duration)
  end

  height = props["height"] ? parse_numeric(props["height"], 320) : 320
  width = props["width"] ? parse_numeric(props["width"], 240) : 240

  if quality_score
    bitdepth = props["bits_per_raw_sample"] ? parse_numeric(props["bits_per_raw_sample"], 8) : 8
    bitrate = props["bit_rate"] ? parse_numeric(props["bit_rate"], 1000) : 1000
    framerate = parse_frame_rate(props["r_frame_rate"]) || 15.0
    codec = props["codec_name"]
    if width && height && codec
      quality = get_quality_score width, height, framerate, bitdepth, bitrate, codec
      tag = "q#{quality}#{duration_string}"
    else tag = "q0#{duration_string}" end
  else
    shortest_side = [width, height].min
    framerate = parse_frame_rate(props["r_frame_rate"])
    tag = "#{duration_string}p#{shortest_side}"
    tag += "f#{framerate.round}" if framerate
  end

  tag
end

def add_tag(path, tag, dry_run)
  require "fileutils"

  dirname = File.dirname(path)
  basename = File.basename(path)
  new_basename = "#{tag}.#{basename}"
  new_path = File.join(dirname, new_basename)

  if new_path != path
    if dry_run
      puts "\"#{path}\" -> \"#{new_path}\""
    else
      FileUtils.mv(path, new_path)
    end
  end
end

paths.each do |path|
  if File.file?(path)
    tag = get_tag path, with_duration, quality_score
    add_tag(path, tag, dry_run) if tag
  end
end
