#!/usr/bin/env ruby
# convert indented itpn packets (validated/canonical form) to markdown
indent_width = 2

def read_packets(io, indent_width)
  packets = []
  current = []
  io.each_line do |raw|
    line = raw.chomp
    next if line.empty?
    leading_spaces = line[/\A */].size
    if leading_spaces.zero? && !current.empty?
      packets << current
      current = []
    end
    current << line
  end
  packets << current unless current.empty?
  packets
end

def packet_to_markdown(packet, indent_width)
  heading = "# #{packet.first.strip}"
  body = packet[1..].map do |line|
    spaces = line[/\A */].size
    depth = (spaces / indent_width) - 1
    "  " * depth + "* " + line.lstrip
  end
  ([heading] + body).join("\n")
end

input_files = ARGV.empty? ? ["-"] : ARGV
input_files.each do |path|
  io = path == "-" ? STDIN : File.open(path, "r")
  read_packets(io, indent_width).each do |packet|
    puts packet_to_markdown(packet, indent_width)
    puts
  end
  io.close unless path == "-"
end