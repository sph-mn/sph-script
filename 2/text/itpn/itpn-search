#!/usr/bin/env ruby
require "optparse"

options = {}
OptionParser.new do |p|
  p.on("--search VALUE", String) { |v| options[:prefix_expr] = v }
  p.on("--search-suffix VALUE", String) { |v| options[:suffix_expr] = v }
  p.on("--search-all VALUE", String) { |v| options[:all_expr] = v }
  p.on("--exclude") { options[:invert] = true }
  p.on("--split") { options[:split_output] = true }
end.parse!(ARGV)

INDENT_WIDTH = 2

def build_predicate(expr)
  return ->(_t) { true } if expr.nil? || expr.empty?
  groups = expr.split(",")
  ->(text) do
    groups.any? do |group|
      group.split(".").all? do |token|
        if token.start_with?("~")
          !text.include?(token[1..])
        else
          text.include?(token)
        end
      end
    end
  end
end

prefix_match = build_predicate(options[:prefix_expr])
suffix_match = build_predicate(options[:suffix_expr])
all_match = build_predicate(options[:all_expr])

def read_packets(io)
  packets = []
  current = []
  io.each_line do |raw|
    line = raw.chomp
    next if line.empty?
    leading_spaces = line[/\A */].size
    if leading_spaces.zero?
      packets << current unless current.empty?
      current = [line]
    else
      current << line
    end
  end
  packets << current unless current.empty?
  packets
end

matched = []
unmatched = []

file_paths = ARGV.empty? ? ["-"] : ARGV
file_paths.each do |path|
  io = path == "-" ? STDIN : File.open(path, "r")
  read_packets(io).each do |packet|
    prefix_text = packet.first.strip
    suffix_text = packet[1..]&.map(&:strip)&.join(" ") || ""
    full_text = packet.map(&:strip).join(" ")
    is_match = prefix_match.call(prefix_text) &&
               suffix_match.call(suffix_text) &&
               all_match.call(full_text)
    is_match = !is_match if options[:invert]
    (is_match ? matched : unmatched) << packet
  end
  io.close unless path == "-"
end

if options[:split_output]
  matched.each { |pkt| puts pkt.join("\n") }
  unless unmatched.empty?
    STDERR.puts
    unmatched.each { |pkt| STDERR.puts pkt.join("\n") }
  end
else
  matched.each { |pkt| puts pkt.join("\n") }
end

exit 1 if matched.empty? && !options[:split_output]
exit 0