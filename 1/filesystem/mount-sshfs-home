#!/usr/bin/guile
!#

(import (sph filesystem) (sph hashtable)
  (sph io) (sph list)
  (sph alist) (sph number)
  (sph other) (sph process)
  (sph string) (sph vector) (sph) (sph cli) (sph process) (sph lang indent-syntax))

(define program-description "mount remote filesystems using sshfs to $HOME/mnt/{hostname}")
(define program-dependencies (q ("sph-lib" "sshfs" "mkdir")))

(define-as about quasiquote
  ( ("description" (unquote program-description))
    ("benefits" "paths are automatically chosen" "paths are predictable"
      "paths are in the home directory")
    ("depends on" (unquote (string-join program-dependencies " "))) ("license" "GPLv3")
    ("maintainer and copyright" "sph@posteo.eu | http://sph.io")))

(define (create-target-argument hostname)
  (string-append (getenv "HOME") "/mnt/" (string-downcase hostname)))

(define (create-source-argument user hostname path)
  (string-append (or (and user (string-append user "@")) "") hostname ":" (or path "/")))

(define (mount-sshfs-home hostname path user dry-run? . sshfs-arguments)
  (let*
    ( (target (create-target-argument hostname))
      (source (create-source-argument user hostname path))
      (commands (list (list "mkdir" "-p" target) (list "sshfs" source target))))
    (if dry-run? (each (l (a) (display-line (string-join (map any->string a) " "))) commands)
      (every (l (a) (apply execute-and-check-result a)) commands))))

(let
  (options
    ( (cli-create #:description program-description
        #:about (prefix-tree->indent-tree about)
        #:options
        (list-q (path #:names #\p #:value-required? #t) (user #:names #\u #:value-required? #t)
          (dry-run #:names #\d) ((hostname sshfs-argument ...))))))
  (apply mount-sshfs-home (alist-ref options (q hostname))
    (alist-ref options (q path)) (alist-ref options (q user))
    (alist-ref options (q dry-run)) (or (alist-ref options (q sshfs-argument)) (list))))
