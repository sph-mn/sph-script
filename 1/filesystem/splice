#!/usr/bin/guile
!#

(import (sph base) (sph cli)
  (only (guile) dirname rmdir string-suffix?) (sph stream) (sph filesystem stream) (srfi srfi-41))

;empty directories
;child files with the same name as parent
;child files occuring in parents parent

(define program-description
  (string-join
    (list "move files belonging to directory to the upper directory and"
      "remove the remaining empty directory. accepts multiple paths and"
      "renames new files should name conflicts occur")
    "\n"))

(define (splice-one path dry-run)
  "string boolean ->
   works only on directories"
  (if (directory? path)
    (let
      ( (path (ensure-trailing-slash path)) (path-dirname (dirname path))
        (path-basename (basename path)))
      (let
        (same-name
          (stream-fold
            (l (r e)
              (let
                ( (cur-path (string-append path e))
                  (target-path (make-path-unique (path-append path-dirname e))))
                (if dry-run (simple-format #t "rename-file ~A ~A\n" cur-path target-path)
                  (rename-file cur-path target-path))
                (if (string-equal? e path-basename) target-path r)))
            #f (directory-stream path)))
        (if dry-run
          (begin (simple-format #t "remove ~A\n" path)
            (if same-name (simple-format #t "rename-file ~A ~A\n" same-name path)))
          (begin (rmdir path) (if same-name (rename-file same-name path))))))))

(define (splice options)
  (alist-bind options (path dry-run)
    (if path (each (l (e) (splice-one e dry-run)) (map path->full-path path)))))

(let*
  ( (cli (cli-create #:about program-description #:options (list-q (dry-run) ((path ...)))))
    (options (cli)))
  (if (null? options) (cli (list "--help")) (splice options)))
